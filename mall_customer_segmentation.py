# -*- coding: utf-8 -*-
"""Mall_Customer_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbNcyfxBC_cYGeQuQ4SPwLJPdhci4i_T
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# clustering algorithms
from sklearn.cluster import KMeans,AgglomerativeClustering
from sklearn.metrics import silhouette_samples, silhouette_score

# load dataset
customer_df = pd.read_csv("/content/Mall_Customers.csv")

customer_df.head()

customer_df.shape

customer_df.info()

customer_df.describe()

customer_dtype = customer_df.dtypes
customer_dtype.value_counts()

customer_df.isnull().sum()

sns.distplot(customer_df['Age'])

sns.distplot(customer_df['Annual Income (k$)'])

sns.distplot(customer_df['Spending Score (1-100)'])

# scatter plot
sns.scatterplot(x=customer_df['Annual Income (k$)'],
                y=customer_df['Spending Score (1-100)'])

#Pairplot
sns.pairplot(customer_df, vars=["Age", "Annual Income (k$)", "Spending Score (1-100)"],  kind ="reg", hue = "Gender", palette="husl", markers = ['o','D'])

customer_df.drop(columns='CustomerID',axis=1,inplace=True)

from sklearn.preprocessing import LabelEncoder
# Create an instance of the LabelEncoder class
le = LabelEncoder()
# Get a list of categorical columns
categorical_cols = customer_df.select_dtypes(include='object').columns
# Apply the label encoder to each categorical column
for col in categorical_cols:
    customer_df[col] = le.fit_transform(customer_df[col])

customer_df.info()

customer_corr = customer_df.corr(method='spearman')
plt.figure(figsize=(8,8))
sns.heatmap(customer_corr, cmap="icefire", linewidths=.5) #'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r'

# select the features
X = customer_df
#Scaling Data
from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()
X = scaler.fit_transform(X)

from sklearn.cluster import KMeans

inertia = []
range_val = range(1,15)
for i in range_val:
  kmean = KMeans(n_clusters=i)
  kmean.fit_predict(pd.DataFrame(customer_df))
  inertia.append(kmean.inertia_)
plt.plot(range_val,inertia,'gx-')
plt.xlabel('Values of K')
plt.ylabel('Inertia')
plt.title('The Elbow Method using Inertia')
plt.show()

# apply kmeans algorithm
kmeans_model=KMeans(5)
kmeans_clusters = kmeans_model.fit_predict(X)

import scipy.cluster.hierarchy as sch
plt.figure(figsize=(10, 7))
plt.title("Customer Dendograms")
dend = sch.dendrogram(sch.linkage(X, method='ward'))

# apply agglomerative algorithm
agglo_model = AgglomerativeClustering(linkage="ward",n_clusters=5)
agglomerative_clusters = agglo_model.fit_predict(X)

agglomerative_clusters

def silhouette_method(df,algo,y_pred):
    print('=================================================================================')
    print('Clustering ',algo," : silhouette score : ",silhouette_score(df,y_pred) )


silhouette_method(customer_df,' : KMeans',kmeans_clusters)
silhouette_method(customer_df,' : Agglomerative',agglomerative_clusters)


print('=================================================================================')

# add the cluster predictions to the dataframe
customer_df['cluster'] = kmeans_clusters
# display the first 5 rows of the dataframe with the cluster predictions
print(customer_df.head())

# create a scatter plot of the data with different colors for each cluster
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='cluster', data=customer_df, palette="deep")
# add a title and labels to the plot
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
# show the plot
plt.show()

# create a scatter plot of the data with different colors for each cluster
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='cluster', data=customer_df, palette="deep")
# add a title and labels to the plot
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Gender')
# show the plot
plt.show()

# create a scatter plot of the data with different colors for each cluster
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='cluster', data=customer_df, palette="deep")
# add a title and labels to the plot
plt.title('Clusters of Customers')
plt.xlabel('Age)')
plt.ylabel('Gender')
# show the plot
plt.show()

# create a scatter plot of the data with different colors for each cluster
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='cluster', data=customer_df, palette="deep")
# add a title and labels to the plot
plt.title('Clusters of Customers')
plt.xlabel('Age)')
plt.ylabel('Gender')
# show the plot
plt.show()